version: '3'
services:
  omnivore-api:
    build:
      context: ${OMNIVORE_REPO_PATH}
      dockerfile: ./packages/api/Dockerfile
    container_name: "omnivore-api"
    networks:
      - omnivore
      - traefik
    # ports:
    #   - "4000:8080"
    healthcheck:
      test: ["CMD-SHELL", "nc -z 0.0.0.0 8080 || exit 1"]
      interval: 15s
      timeout: 90s
    environment:
      - API_ENV=local
      - PG_HOST=omnivore-postgres
      - PG_USER=${OMNIVORE_POSTGRES_USER}
      - PG_PASSWORD=${OMNIVORE_POSTGRES_PASSWORD}
      - PG_DB=${OMNIVORE_POSTGRES_DB}
      - PG_PORT=5432
      - PG_POOL_MAX=20
      # - JAEGER_HOST=jaeger
      - IMAGE_PROXY_SECRET=${OMNIVORE_IMAGE_PROXY_SECRET}
      - JWT_SECRET=${OMNIVORE_JWT_SECRET}
      - SSO_JWT_SECRET=${OMNIVORE_SSO_JWT_SECRET}
      - CLIENT_URL=https://${OMNIVORE_DOMAIN_NAME}
      - GATEWAY_URL=http://localhost:8080/api
      - CONTENT_FETCH_URL=http://omnivore-content-fetch:8080/?token=${OMNIVORE_CONTENT_FETCH_VERIFICATION_TOKEN} # Using the omnivore docker network
    depends_on:
      omnivore-migrate:
        condition: service_completed_successfully
    labels:
      - traefik.enable=true
      - traefik.http.routers.omnivore-api.rule=Host(`$OMNIVORE_API_DOMAIN_NAME`)
      - traefik.http.routers.omnivore-api.entrypoints=websecure
      - traefik.http.routers.omnivore-api.tls.certresolver=cloudflare
      - traefik.http.services.omnivore-api.loadbalancer.server.port=8080
      - dsm.ignore=true
  omnivore-content-fetch:
    build:
      context: ${OMNIVORE_REPO_PATH}
      dockerfile: ./packages/content-fetch/Dockerfile
    container_name: "omnivore-content-fetch"
    networks:
      - omnivore
    # ports:
    #   - "9090:8080"
    environment:
      - JWT_SECRET=${OMNIVORE_JWT_SECRET}
      - VERIFICATION_TOKEN=${OMNIVORE_CONTENT_FETCH_VERIFICATION_TOKEN}
      - REST_BACKEND_ENDPOINT=http://omnivore-api:8080/api # Using the omnivore docker network
    depends_on:
      omnivore-api:
        condition: service_healthy
  omnivore-migrate:
    build:
      context: ${OMNIVORE_REPO_PATH}
      dockerfile: ./packages/db/Dockerfile
    container_name: "omnivore-migrate"
    command: '/bin/sh ./packages/db/setup.sh' # Also create a demo user with email: demo@omnivore.app, password: demo
    networks:
      - omnivore
    environment:
      - PGPASSWORD=${OMNIVORE_POSTGRES_PASSWORD}
      - PG_HOST=omnivore-postgres # Using the omnivore docker network
      - PG_USER=${OMNIVORE_POSTGRES_USER}
      - PG_PASSWORD=${OMNIVORE_POSTGRES_PASSWORD}
      - PG_DB=${OMNIVORE_POSTGRES_DB}
    depends_on:
      omnivore-postgres:
        condition: service_healthy
  omnivore-postgres:
    image: "ankane/pgvector:v0.5.1"
    container_name: "omnivore-postgres"
    networks:
      - omnivore
    environment:
      - POSTGRES_USER=${OMNIVORE_POSTGRES_USER}
      - POSTGRES_PASSWORD=${OMNIVORE_POSTGRES_PASSWORD}
      - POSTGRES_DB=${OMNIVORE_POSTGRES_DB}
      - PG_POOL_MAX=20
    volumes:
      - ${OMNIVORE_DATA_DIRECTORY}/postgres:/var/lib/postgresql/data
    healthcheck:
      test: "exit 0"
      interval: 2s
      timeout: 12s
      retries: 3
    # expose:
    #   - 5432
  omnivore-tts:
    build:
      context: ${OMNIVORE_REPO_PATH}
      dockerfile: ./packages/text-to-speech/Dockerfile
    container_name: "omnivore-tts"
    networks:
      - omnivore
    labels:
      - traefik.enable=true
      - traefik.http.routers.omnivore-tts.rule=Host(`$OMNIVORE_TTS_DOMAIN_NAME`)
      - traefik.http.routers.omnivore-tts.entrypoints=websecure
      - traefik.http.routers.omnivore-tts.tls.certresolver=cloudflare
      - traefik.http.services.omnivore-tts.loadbalancer.server.port=8080
      - dsm.ignore=true
  # omnivore-api:
  #   build:
  #     context: ${OMNIVORE_REPO_PATH}
  #     dockerfile: ./self-hosting/Dockerfile
  #   container_name: "omnivore-api"
  #   networks:
  #     - omnivore
  #     - traefik
  #   healthcheck:
  #     test: ["CMD-SHELL", "nc -z 0.0.0.0 8080 || exit 1"]
  #     interval: 15s
  #     timeout: 90s
  #   environment:
  #     - API_ENV=local
  #     - PG_HOST=omnivore-postgres
  #     - PG_USER=${OMNIVORE_POSTGRES_USER}
  #     - PG_PASSWORD=${OMNIVORE_POSTGRES_PASSWORD}
  #     - PG_DB=${OMNIVORE_POSTGRES_DB}
  #     - PG_PORT=5432
  #     - PG_POOL_MAX=20
  #     - JWT_SECRET=${OMNIVORE_JWT_SECRET}
  #     - SSO_JWT_SECRET=${OMNIVORE_SSO_JWT_SECRET}
  #     - CLIENT_URL=https://${OMNIVORE_DOMAIN_NAME}
  #     - GATEWAY_URL=http://localhost:8080/api
  #     - REMINDER_TASK_HANDLER_URL=/svc/reminders/trigger
  #   labels:
  #       - traefik.enable=true
  #       - traefik.http.routers.omnivore-api.rule=Host(`$OMNIVORE_API_DOMAIN_NAME`)
  #       - traefik.http.routers.omnivore-api.entrypoints=websecure
  #       - traefik.http.routers.omnivore-api.tls.certresolver=cloudflare
  #       - traefik.http.services.omnivore-api.loadbalancer.server.port=8080
  omnivore-web:
    build:
      context: ${OMNIVORE_REPO_PATH}
      dockerfile: ./packages/web/Dockerfile
      args:
        - APP_ENV=prod
        - BASE_URL=https://${OMNIVORE_DOMAIN_NAME}
        - SERVER_BASE_URL=https://${OMNIVORE_API_DOMAIN_NAME}
        - HIGHLIGHTS_BASE_URL=https://${OMNIVORE_DOMAIN_NAME}
    container_name: "omnivore-web"
    networks:
      - omnivore
      - traefik
    # ports:
    #   - "3000:8080"
    environment:
      - NEXT_PUBLIC_APP_ENV=prod
      - NEXT_PUBLIC_BASE_URL=https://${OMNIVORE_DOMAIN_NAME}
      - NEXT_PUBLIC_SERVER_BASE_URL=https://${OMNIVORE_API_DOMAIN_NAME}
      - NEXT_PUBLIC_HIGHLIGHTS_BASE_URL=https://${OMNIVORE_DOMAIN_NAME}
      - INCLUDE_LEGACY_REWRITES=FALSE
    depends_on:
      omnivore-api:
        condition: service_healthy
    labels:
      - traefik.enable=true
      - traefik.http.routers.omnivore.rule=Host(`$OMNIVORE_DOMAIN_NAME`)
      - traefik.http.routers.omnivore.entrypoints=websecure
      - traefik.http.routers.omnivore.tls.certresolver=cloudflare
      - traefik.http.services.omnivore.loadbalancer.server.port=8080
      - dsm.name=Omnivore

networks:
  traefik:
    name: traefik
    external: true
  omnivore:
    name: omnivore
