---
- name: Configure nas
  hosts: nas-01
  become: true

  vars:
    docker_compose_dst_data_directory_path: "/mnt/docker"

  roles:
    - ansible_non_become_user_facts
    # - configure_server
    # - geerlingguy.docker
    # - mergerfs_install
    # - snapper_install
    # - snapraid_btrfs_install
    # - artis3n.tailscale
    # - geerlingguy.postfix

  tasks:
    # - name: Install packages
    #   ansible.builtin.apt:
    #     name:
    #       - ruby
    #       - zfsutils-linux
    #     state: present
    # - name: Copy syncoid ssh key
    #   ansible.builtin.copy:
    #     content: "{{ nas_01_syncoid_ssh_private_key }}"
    #     dest: "{{ ansible_non_become_user_home_dir }}/.ssh/id_ed25519"
    #     owner: "{{ ansible_non_become_user_id }}"
    #     group: "{{ ansible_non_become_user_gid }}"
    #     mode: '0600'

    # - name: Create mount points
    #   ansible.builtin.file:
    #     path: "/mnt/{{ item }}"
    #     state: directory
    #     owner: "{{ ansible_non_become_user_id }}"
    #     group: "{{ ansible_non_become_user_gid }}"
    #     mode: '0755'
    #   loop:
    #     - "storage"
    #     - "depot"
    #     - "depot-cache"
    #     - "data"
    #     - "content"
    #     - "docker"
    # - name: Set data_disks fact
    #   ansible.builtin.set_fact:
    #     data_disks: "{{ data_disks | default([]) | union(['data%02d' | format(item)]) }}"
    #   loop: "{{ range(1, 12 + 1) }}"
    # - name: Create root data mount points
    #   ansible.builtin.file:
    #     path: "/mnt/{{ item }}"
    #     state: directory
    #     owner: "{{ ansible_non_become_user_id }}"
    #     group: "{{ ansible_non_become_user_gid }}"
    #     mode: '0755'
    #   loop: "{{ data_disks }}"
    # - name: Create parity mount points
    #   ansible.builtin.file:
    #     path: "{{ '/mnt/parity%02x' | format(item) }}"
    #     state: directory
    #     owner: "{{ ansible_non_become_user_id }}"
    #     group: "{{ ansible_non_become_user_gid }}"
    #     mode: '0755'
    #   loop: "{{ range(1, 2 + 1) }}"
    # - name: Create subvolume data mount points
    #   ansible.builtin.file:
    #     path: "/mnt/data/{{ item }}"
    #     state: directory
    #     owner: "{{ ansible_non_become_user_id }}"
    #     group: "{{ ansible_non_become_user_gid }}"
    #     mode: '0755'
    #   loop: "{{ data_disks }}"
    # - name: Create subvolume content mount points
    #   ansible.builtin.file:
    #     path: "/mnt/content/{{ item }}"
    #     state: directory
    #     owner: "{{ ansible_non_become_user_id }}"
    #     group: "{{ ansible_non_become_user_gid }}"
    #     mode: '0755'
    #   loop:
    #     - "data03"
    #     - "data08"
    #     - "snapraid"
    - name: Add fstab entries
      ansible.builtin.blockinfile:
        block: "{{ lookup('ansible.builtin.file', 'files/nas-01/fstab') }}"
        path: "/etc/fstab"
    # - name: Install snapraid
    #   ansible.builtin.include_role:
    #     name: ironicbadger.snapraid
    #     tasks_from: install-debian
    # - name: Copy snapraid.conf
    #   ansible.builtin.copy:
    #     src: "files/nas-01/snapraid.conf"
    #     dest: "/etc/snapraid.conf"
    #     owner: root
    #     group: root
    #     mode: '0644'
    # - name: Create snapper config-templates directory
    #   ansible.builtin.file:
    #     path: "/etc/snapper/config-templates"
    #     state: directory
    #     owner: root
    #     group: root
    #     mode: '0755'
    # - name: Copy snapper data subvolume template
    #   ansible.builtin.copy:
    #     src: "files/nas-01/snapper_snapraid_data_template"
    #     dest: "/etc/snapper/config-templates/snapraid_data"
    #     owner: root
    #     group: root
    #     mode: '0644'
    # # - name: Set snapper_config_data_disks_stat_loop_result
    # #   ansible.builtin.stat:
    # #     path: "{{ ('/', 'etc', 'snapper', 'configs', item) | path_join }}"
    # #   loop: "{{ data_disks }}"
    # #   register: snapper_config_data_disks_stat_loop_result
    # # - name: Create snapper configs for data subvolumes
    # #   vars:
    # #     snapper_data_disks_to_create: "{{ snapper_config_data_disks_stat_loop_result.results | community.general.json_query('[?stat.exists==`false`].item') }}"
    # #   ansible.builtin.command:
    # #     cmd: "snapper --config {{ item }} create-config --template snapraid_data /mnt/data/{{ item }}"
    # #   loop: "{{ snapper_data_disks_to_create }}"
    # #   changed_when: true
    # - name: Configure zed notifications
    #   ansible.builtin.include_role:
    #     name: zed_notifications
    # - name: Add healthchecks.service
    #   ansible.builtin.include_role:
    #     name: healthchecks_service
    # - name: Install snapraid-btrfs-runner
    #   vars:
    #     snapraid_btrfs_runner_install_conf_template_path: "files/nas-01/snapraid-btrfs-runner.conf.j2"
    #     snapraid_btrfs_runner_install_service_template_path: "files/nas-01/snapraid-btrfs-runner.service.j2"
    #     snapraid_btrfs_runner_install_timer_template_path: "files/nas-01/snapraid-btrfs-runner.timer"
    #   ansible.builtin.include_role:
    #     name: snapraid_btrfs_runner_install
    # # - name: Configure syncoid to nas-02
    # #   ansible.builtin.include_role:
    # #     name: syncoid_source
    # #   vars:
    # #     syncoid_source_username: "{{ ansible_user }}"
    # #     syncoid_destination_username: "{{ nas_02_syncoid_username }}"
    # #     syncoid_destination_host: "nas-02.{{ domain_name }}"
    # #     syncoid_pre_sync_command: "/usr/bin/wakeonlan {{ nas_host_02_mac_address }} && /usr/bin/sleep 5m"
    # #     syncoid_post_sync_command: "-/usr/bin/ssh -i /home/{{ ansible_user }}/.ssh/id_ed25519 {{ nas_02_syncoid_username }}@nas-host-02.{{ domain_name }} 'sudo shutdown now'"
    # #     syncoid_timer_on_calendar: "*-*-* 01:00:00"
    # #     syncoid_datasets:
    # #       - syncoid_source_dataset: tank
    # #         syncoid_destination_dataset: backups/tank
    # #         syncoid_healthchecks_uuid: 432b13d3-f601-4d61-8f55-e77f26101d5b
    # #       - syncoid_source_dataset: sink
    # #         syncoid_destination_dataset: backups/sink
    # #         syncoid_healthchecks_uuid: 762e5887-0bdb-496e-bc8d-fccdf2179573
    # - name: Configure syncoid to nas-03
    #   ansible.builtin.include_role:
    #     name: syncoid_source
    #   vars:
    #     syncoid_source_username: "{{ ansible_user }}"
    #     syncoid_source_ssh_public_key: "{{ nas_01_syncoid_ssh_public_key }}"
    #     syncoid_destination_username: "{{ nas_03_syncoid_username }}"
    #     syncoid_destination_host: "nas-03.{{ domain_name }}"
    #     homeassistant_post_data:
    #       entity_id: switch.nas_03_outlet_switch
    #     homeassistant_switch_command: "/usr/bin/curl --no-progress-meter --header 'Authorization: Bearer {{ homeassistant_access_token }}' --header 'Content-Type application/json' -d '{{ homeassistant_post_data | to_json }}' --request POST https://homeassistant.{{ domain_name }}:8123/api/services/switch/"
    #     syncoid_pre_sync_commands:
    #       - "/usr/bin/echo 'Powering on via Home Assistant' ; {{ homeassistant_switch_command }}turn_on"
    #       - "/usr/bin/echo 'Sleeping for 3m...' ; /usr/bin/sleep 3m"
    #     syncoid_post_sync_commands:
    #       - "-/usr/bin/ssh -o StrictHostKeyChecking=accept-new -i /home/{{ ansible_user }}/.ssh/id_ed25519 {{ nas_03_syncoid_username }}@{{ syncoid_destination_host }} 'sudo shutdown now' ; echo 'Shutdown complete'"
    #       - "/usr/bin/echo 'Sleeping for 3m...' ; sleep 3m"
    #       - "/usr/bin/echo 'Powering off via Home Assistant' ; {{ homeassistant_switch_command }}turn_off"
    #     syncoid_timer_on_calendar: "*-*-* 01:00:00"
    #     syncoid_datasets:
    #       - syncoid_source_dataset: tank
    #         syncoid_destination_dataset: backups/tank
    #         syncoid_destination_dataset_mountpoint: /mnt/backups/tank
    #         syncoid_healthchecks_uuid: 507372f3-dc44-4d68-867e-8283eefc9bf5
    #       - syncoid_source_dataset: sink
    #         syncoid_destination_dataset: backups/sink
    #         syncoid_destination_dataset_mountpoint: /mnt/backups/sink
    #         syncoid_healthchecks_uuid: 379c392b-04f5-42ef-bbc7-1afdd850d863
    # - name: Configure syncoid to offsite-nas
    #   ansible.builtin.include_role:
    #     name: syncoid_source
    #   vars:
    #     syncoid_source_username: "{{ ansible_user }}"
    #     syncoid_source_ssh_public_key: "{{ nas_01_syncoid_ssh_public_key }}"
    #     syncoid_destination_username: "{{ offsite_nas_syncoid_username }}"
    #     syncoid_destination_host: "offsite-nas.{{ tailscale_tailnet }}"
    #     syncoid_pre_sync_commands:
    #       - "/usr/bin/echo 'Powering on via PiKVM' ; -/usr/bin/curl --no-progress-meter --header 'X-KVMD-User:{{ offsite_pikvm_web_username }}' --header 'X-KVMD-Passwd:{{ offsite_pikvm_web_password }}' --request POST 'https://offsite-pikvm.{{ tailscale_tailnet }}/api/atx/power?action=on'"
    #       - "/usr/bin/echo 'Sleeping for 5m...' ; /usr/bin/sleep 5m"
    #     syncoid_post_sync_commands:
    #       - "-/usr/bin/ssh -o StrictHostKeyChecking=accept-new -i /home/{{ ansible_user }}/.ssh/id_ed25519 {{ offsite_nas_syncoid_username }}@offsite-nas.{{ tailscale_tailnet }} 'sudo shutdown now' ; echo 'Shutdown complete'"
    #     syncoid_timer_on_calendar: "*-*-* 02:00:00"
    #     syncoid_datasets:
    #       - syncoid_source_dataset: tank
    #         syncoid_destination_dataset: backups/tank
    #         syncoid_destination_dataset_mountpoint: /mnt/backups/tank
    #         syncoid_healthchecks_uuid: bc333132-22d4-49de-a975-15ff8683b037
    #       - syncoid_source_dataset: sink
    #         syncoid_destination_dataset: backups/sink
    #         syncoid_destination_dataset_mountpoint: /mnt/backups/sink
    #         syncoid_healthchecks_uuid: e79fc71c-6322-484a-93ef-74f63c6e6ef9
    # - name: Run docker_compose_traefik # Needs to be before docker-compose-nas-01 for the traefik network to be created
    #   vars:
    #     docker_compose_traefik_version: "3.0"
    #     docker_compose_traefik_enable_dashboard: true
    #     docker_compose_traefik_enable_tailscale: true
    #     docker_compose_traefik_log_level: ERROR
    #   ansible.builtin.include_role:
    #     name: docker_compose_traefik
    - name: Configure docker compose roles
      vars:
        docker_compose_nextcloud_data_directory: "/mnt/tank/nextcloud/app/"
        scrutiny_shoutrrr_notify_urls:
          - "pushover://shoutrrr:{{ scrutiny_pushover_token }}@{{ pushover_user_key }}"
        immich_photos_directory: "/mnt/tank/immich/photos"
        immich_db_directory: "/mnt/tank/immich/db"
        immich_machine_learning_model_cache_directory: "/mnt/tank/immich/model_cache"
      ansible.builtin.include_role:
        name: "{{ nas_01_docker_compose_role }}"
      loop:
        # - docker_compose_dashboard_services_manager_provider
        # - docker_compose_diun
        - docker_compose_immich
        # - docker_compose_nextcloud
        # - docker_compose_omnivore
        # - docker_compose_scrutiny_web
      loop_control:
        loop_var: nas_01_docker_compose_role
    - name: Configure nas-01 docker compose
      vars:
        docker_compose_src_file_path: files/nas-01/docker-compose-nas-01.yaml
        docker_compose_copy_scripts: true
        docker_compose_envs:
          # CERTBOT_EMAIL: "{{ certbot_email }}"
          # CLOUDFLARE_API_TOKEN: "{{ cloudflare_api_token }}"
          # STORAGE_DIR: /mnt/storage
          MINIO_USERNAME: "{{ minio_username }}"
          MINIO_PASSWORD: "{{ minio_password }}"
          LINKDING_SUPERUSER_NAME: "{{ linkding_superuser_name }}"
          LINKDING_SUPERUSER_PASSWORD: "{{ linkding_superuser_password }}"
          LINKWARDEN_POSTGRES_DB: "linkwarden"
          LINKWARDEN_POSTGRES_USER: "{{ linkwarden_postgres_user }}"
          LINKWARDEN_POSTGRES_PASSWORD: "{{ linkwarden_postgres_password }}"
          LINKWARDEN_NEXTAUTH_SECRET: "{{ linkwarden_nextauth_secret }}"
      ansible.builtin.include_role:
        name: docker_compose
    # - name: Configure scrutiny collector
    #   vars:
    #     scrutiny_ignored_devices:
    #       - /dev/sda
    #       - /dev/sdb
    #       - /dev/sdc
    #   ansible.builtin.include_role:
    #     name: scrutiny_collector
    # - name: Configure samba
    #   ansible.builtin.copy:
    #     src: "files/nas-01/smb.conf"
    #     dest: "/etc/samba/smb.conf"
    #     owner: root
    #     group: root
    #     mode: '0644'
    #   register: copy_smb_conf_result
    # - name: Restart smbd # noqa no-handler
    #   when: copy_smb_conf_result.changed
    #   ansible.builtin.systemd:
    #     name: smbd
    #     state: restarted
    # - name: Configure nfs
    #   vars:
    #     nfs_exports:
    #       # - "/mnt/basin *(rw,sync,insecure,no_subtree_check,all_squash,anonuid={{ smb_nas_01_uid }},anongid={{ vault_smb_nas_01_gid }})"
    #       # - "/mnt/depot/photos *(rw,sync,insecure,no_subtree_check,all_squash,anonuid={{ smb_nas_01_uid }},anongid={{ vault_smb_nas_01_gid }})"
    #       # - "/mnt/sink/photos *(rw,sync,insecure,no_subtree_check,all_squash,anonuid={{ smb_nas_01_uid }},anongid={{ vault_smb_nas_01_gid }})"
    #       - "/mnt/storage *(rw,sync,insecure,fsid=999,no_subtree_check,all_squash,anonuid={{ smb_nas_01_uid }},anongid={{ vault_smb_nas_01_gid }})"
    #   ansible.builtin.include_role:
    #     name: geerlingguy.nfs
