---
- name: Configure nas
  hosts: nas-01
  become: true

  vars:
    docker_compose_dst_data_directory_path: "/mnt/docker"
    power_saving_hard_drives:
      - dev: /dev/disk/by-id/scsi-SATA_ST18000NM000J-2T_ZR5BA9B5
        epc_idle_a: enable
        epc_idle_b: enable
        epc_idle_c: enable
        epc_standby_z: enable
      - dev: /dev/disk/by-id/scsi-SATA_WDC_WD140EDGZ-11_9LH51ZBG
        epc_idle_a: enable
        epc_idle_b: 300000
        epc_idle_c: 600000
        epc_standby_z: 900000
      - dev: /dev/disk/by-id/scsi-SATA_WDC_WD140EDFZ-11_QBH1LSAT
        epc_idle_a: enable
        epc_idle_b: 300000
        epc_idle_c: 600000
        epc_standby_z: 900000
      - dev: /dev/disk/by-id/scsi-SATA_ST14000NM000J-2T_ZR516PR9
        epc_idle_a: enable
        epc_idle_b: enable
        epc_idle_c: enable
        epc_standby_z: enable
      - dev: /dev/disk/by-id/scsi-SATA_ST18000NM003D-3D_ZVTB4SA5
        epc_idle_a: enable
        epc_idle_b: enable
        epc_idle_c: enable
        epc_standby_z: enable
      - dev: /dev/disk/by-id/scsi-SATA_WDC_WD180EDGZ-11_8LGD8JRK
        epc_idle_a: enable
        epc_idle_b: 300000
        epc_idle_c: 600000
        epc_standby_z: 900000
      - dev: /dev/disk/by-id/scsi-SATA_WDC_WD140EDFZ-11_9LGA6YWA
        epc_idle_a: enable
        epc_idle_b: 300000
        epc_idle_c: 600000
        epc_standby_z: 900000
      - dev: /dev/disk/by-id/scsi-SATA_WDC_WD180EDGZ-11_3GKK6M2K
        epc_idle_a: enable
        epc_idle_b: 300000
        epc_idle_c: 600000
        epc_standby_z: 900000
      - dev: /dev/disk/by-id/scsi-SATA_ST14000NM001G-2K_ZL2D3HY7
        epc_idle_a: enable
        epc_idle_b: enable
        epc_idle_c: enable
        epc_standby_z: enable
      - dev: /dev/disk/by-id/scsi-SATA_WDC_WD140EDFZ-11_X1GH3GLL
        epc_idle_a: enable
        epc_idle_b: 300000
        epc_idle_c: 600000
        epc_standby_z: 900000
      - dev: /dev/disk/by-id/scsi-SATA_ST18000NM000J-2T_ZR5BA9B5
        epc_idle_a: enable
        epc_idle_b: enable
        epc_idle_c: enable
        epc_standby_z: enable
      - dev: /dev/disk/by-id/scsi-SATA_ST18000NM003D-3D_ZVTB4MXV
        epc_idle_a: enable
        epc_idle_b: enable
        epc_idle_c: enable
        epc_standby_z: enable
      - dev: /dev/disk/by-id/scsi-SATA_WDC_WD180EDGZ-11_3LGHSB2U
        epc_idle_a: enable
        epc_idle_b: 300000
        epc_idle_c: 600000
        epc_standby_z: 900000
      - dev: /dev/disk/by-id/scsi-SATA_ST24000DM001-3Y7_ZXA0KZXF
        epc_idle_a: enable
        epc_idle_b: enable
        epc_idle_c: enable
        epc_standby_z: enable
      - dev: /dev/disk/by-id/scsi-SATA_ST22000NM000C-3W_ZXA0C5CR
        epc_idle_a: enable
        epc_idle_b: enable
        epc_idle_c: enable
        epc_standby_z: enable

  roles:
    - ansible_non_become_user_facts
    # - configure_server
    # # - geerlingguy.docker
    # - role: mergerfs_install
    #   vars:
    #     mergerfs_install_tools: true
    # # - snapper_install
    # # - snapraid_btrfs_install
    # # - artis3n.tailscale.machine    # # - geerlingguy.postfix
    - role: power_saving
      vars:
        power_saving_configure_cpu: false
    # - zed_notifications
    # - healthchecks_service
    # - role: scrutiny_collector
    #   vars:
    #     scrutiny_ignored_devices:
    #       - /dev/sda
    #       - /dev/sdb
    #       - /dev/sdc
    # - role: sanoid
    #   vars:
    #     sanoid_dataset_configs:
    #       template:
    #         autosnap: true
    #         autoprune: true
    #         frequently: 0
    #         hourly: 1
    #         daily: 30
    #         monthly: 1
    #         yearly: 0
    #       tank:
    #         use_template: template
    #         recursive: true
    #       sink:
    #         use_template: template
    #         recursive: true
    # - role: samba
    #   vars:
    #     samba_users:
    #       - username: "{{ smb_nas_01_username }}"
    #         password: "{{ smb_nas_01_password }}"
    #     samba_homes_enabled: true
    #     samba_shares:
    #       - name: depot
    #         path: /mnt/depot
    #       - name: proxmox
    #         path: /mnt/tank/proxmox
    #       - name: sink
    #         path: /mnt/sink
    #       - name: storage
    #         path: /mnt/storage
    #       - name: tank
    #         path: /mnt/tank
    # - role: docker_compose_traefik
    #   vars:
    #     docker_compose_traefik_enable_dashboard: true
    #     docker_compose_traefik_enable_tailscale: true
    #     docker_compose_traefik_log_level: ERROR
    # - role: docker_compose_dashboard_services_manager_provider
    # - role: docker_compose_diun
    # - role: docker_compose_frigate
    #   vars:
    #     frigate_config_file_path: "files/nas-01/frigate-config.yml"
    #     frigate_storage_directory: "/mnt/tank/frigate"
    # - role: docker_compose_shinobi
    #   vars:
    #     shinobi_data_directory: "/mnt/tank/shinobi/data"
    #     shinobi_db_directory: "/mnt/tank/shinobi/db"
    # - role: docker_compose_immich
    #   vars:
    #     immich_no_machine_learning: true
    #     immich_machine_learning_host: "http://media-01.{{ domain_name }}:3003"
    #     immich_photos_directory: "/mnt/tank/immich/photos"
    #     immich_db_directory: "/mnt/tank/immich/db"
    # - role: docker_compose_manyfold
    # - role: docker_compose_nextcloud
    #   vars:
    #     docker_compose_nextcloud_data_directory: "/mnt/tank/nextcloud/app/"
    #     nextcloud_trusted_domains: "nextcloud.{{ domain_name }}"
    # - role: docker_compose_omnivore
    # - role: docker_compose_paperless_ngx
    #   vars:
    #     paperless_directory: "/mnt/tank/paperless-ngx"

    # - role: docker_compose_scrutiny_web
    #   vars:
    #     scrutiny_shoutrrr_notify_urls:
    #       - "pushover://shoutrrr:{{ scrutiny_pushover_token }}@{{ pushover_user_key }}"
    # - role: docker_compose
    #   vars:
    #     docker_compose_src_file_path: files/nas-01/docker-compose-nas-01.yaml
    #     docker_compose_copy_scripts: true
    #     docker_compose_envs:
    #       MINIO_USERNAME: "{{ minio_username }}"
    #       MINIO_PASSWORD: "{{ minio_password }}"
    #       LINKDING_SUPERUSER_NAME: "{{ linkding_superuser_name }}"
    #       LINKDING_SUPERUSER_PASSWORD: "{{ linkding_superuser_password }}"
    #       LINKWARDEN_POSTGRES_DB: "linkwarden"
    #       LINKWARDEN_POSTGRES_USER: "{{ linkwarden_postgres_user }}"
    #       LINKWARDEN_POSTGRES_PASSWORD: "{{ linkwarden_postgres_password }}"
    #       LINKWARDEN_NEXTAUTH_SECRET: "{{ linkwarden_nextauth_secret }}"
    # - role: rtsp_recorder
    #   vars:
    #     rtsp_stream_name: pi-camera-cam1
    #     rtsp_stream_url: rtsp://pi-camera.omegaho.me:8554/cam1
    #     rtsp_stream_recording_directory: /mnt/data/data05/temp/recording
    # - role: beszel_agent
    # - role: prometheus.prometheus.node_exporter
    # - role: docker_compose_docker_monitoring
  tasks:
    # - name: Copy 90-connectx-4-lx.conf netplan config
    #   ansible.builtin.copy:
    #     src: nas-01/90-connectx-4-lx.yaml
    #     dest: /etc/netplan/90-connectx-4-lx.yaml
    #     mode: "0644"
    # - name: Install packages
    #   ansible.builtin.apt:
    #     name:
    #       - ruby
    #       - zfsutils-linux
    #     state: present
    # - name: Create mount points
    #   ansible.builtin.file:
    #     path: "/mnt/{{ item }}"
    #     state: directory
    #     owner: "{{ ansible_non_become_user_id }}"
    #     group: "{{ ansible_non_become_user_gid }}"
    #     mode: '0755'
    #   loop:
    #     - "storage"
    #     - "depot"
    #     - "data"
    #     - "content"
    #     - "docker"
    # - name: Set data_disks fact
    #   ansible.builtin.set_fact:
    #     data_disks: "{{ data_disks | default([]) | union(['data%02d' | format(item)]) }}"
    #   loop: "{{ range(1, 12 + 1) }}"
    # - name: Create root data mount points
    #   ansible.builtin.file:
    #     path: "/mnt/{{ item }}"
    #     state: directory
    #     owner: "{{ ansible_non_become_user_id }}"
    #     group: "{{ ansible_non_become_user_gid }}"
    #     mode: '0755'
    #   loop: "{{ data_disks }}"
    # - name: Create parity mount points
    #   ansible.builtin.file:
    #     path: "{{ '/mnt/parity%02x' | format(item) }}"
    #     state: directory
    #     owner: "{{ ansible_non_become_user_id }}"
    #     group: "{{ ansible_non_become_user_gid }}"
    #     mode: '0755'
    #   loop: "{{ range(1, 2 + 1) }}"
    # - name: Create subvolume data mount points
    #   ansible.builtin.file:
    #     path: "/mnt/data/{{ item }}"
    #     state: directory
    #     owner: "{{ ansible_non_become_user_id }}"
    #     group: "{{ ansible_non_become_user_gid }}"
    #     mode: '0755'
    #   loop: "{{ data_disks }}"
    # - name: Create subvolume content mount points
    #   ansible.builtin.file:
    #     path: "/mnt/content/{{ item }}"
    #     state: directory
    #     owner: "{{ ansible_non_become_user_id }}"
    #     group: "{{ ansible_non_become_user_gid }}"
    #     mode: '0755'
    #   loop:
    #     - "data03"
    #     - "data08"
    #     - "snapraid"
    - name: Add fstab entries
      ansible.builtin.blockinfile:
        block: "{{ lookup('ansible.builtin.file', 'files/nas-01/fstab') }}"
        path: "/etc/fstab"
    # - name: Install snapraid
    #   ansible.builtin.include_role:
    #     name: ironicbadger.snapraid
    #     tasks_from: install-debian
    # - name: Copy snapraid.conf
    #   ansible.builtin.copy:
    #     src: "files/nas-01/snapraid.conf"
    #     dest: "/etc/snapraid.conf"
    #     owner: root
   #     group: root
    #     mode: '0644'
    # - name: Create snapper config-templates directory
    #   ansible.builtin.file:
    #     path: "/etc/snapper/config-templates"
    #     state: directory
    #     owner: root
    #     group: root
    #     mode: '0755'
    # - name: Copy snapper data subvolume template
    #   ansible.builtin.copy:
    #     src: "files/nas-01/snapper_snapraid_data_template"
    #     dest: "/etc/snapper/config-templates/snapraid_data"
    #     owner: root
    #     group: root
    #     mode: '0644'
    # # - name: Set snapper_config_data_disks_stat_loop_result
    # #   ansible.builtin.stat:
    # #     path: "{{ ('/', 'etc', 'snapper', 'configs', item) | path_join }}"
    # #   loop: "{{ data_disks }}"
    # #   register: snapper_config_data_disks_stat_loop_result
    # # - name: Create snapper configs for data subvolumes
    # #   vars:
    # #     snapper_data_disks_to_create: "{{ snapper_config_data_disks_stat_loop_result.results | community.general.json_query('[?stat.exists==`false`].item') }}"
    # #   ansible.builtin.command:
    # #     cmd: "snapper --config {{ item }} create-config --template snapraid_data /mnt/data/{{ item }}"
    # #   loop: "{{ snapper_data_disks_to_create }}"
    # #   changed_when: true
    # - name: Install snapraid-btrfs-runner
    #   vars:
    #     snapraid_btrfs_runner_install_conf_template_path: "files/nas-01/snapraid-btrfs-runner.conf.j2"
    #     snapraid_btrfs_runner_install_service_template_path: "files/nas-01/snapraid-btrfs-runner.service.j2"
    #     snapraid_btrfs_runner_install_timer_template_path: "files/nas-01/snapraid-btrfs-runner.timer"
    #   ansible.builtin.include_role:
    #     name: snapraid_btrfs_runner_install
    # - name: Configure syncoid to backup-01
    #   ansible.builtin.include_role:
    #     name: syncoid_source
    #   vars:
    #     syncoid_source_username: "{{ ansible_user }}"
    #     syncoid_source_ssh_private_key: "{{ nas_01_syncoid_ssh_private_key }}"
    #     syncoid_destination_username: "syncoid"
    #     syncoid_destination_host: "backup-01.{{ domain_name }}"
    #     syncoid_timer_on_calendar: "*-*-* 02:00:00"
    #     syncoid_datasets:
    #       - syncoid_source_dataset: tank
    #         syncoid_destination_dataset: backups/tank
    #         syncoid_destination_dataset_mountpoint: /mnt/backups/tank
    #         syncoid_healthchecks_uuid: 8493a848-6cfd-4ab9-9931-c94a6b053b21
    #       - syncoid_source_dataset: sink
    #         syncoid_destination_dataset: backups/sink
    #         syncoid_destination_dataset_mountpoint: /mnt/backups/sink
    #         syncoid_healthchecks_uuid: b5eaeb0d-e04c-49da-bf13-020e82560a2a
    # - name: Configure syncoid to offsite-nas
    #   ansible.builtin.include_role:
    #     name: syncoid_source
    #   vars:
    #     syncoid_source_username: "{{ ansible_user }}"
    #     syncoid_source_ssh_private_key: "{{ nas_01_syncoid_ssh_private_key }}"
    #     syncoid_destination_username: "{{ offsite_nas_syncoid_username }}"
    #     syncoid_destination_host: "offsite-nas.{{ tailscale_tailnet }}"
    #     syncoid_pre_sync_commands:
    #       - "/usr/bin/echo 'Powering on via PiKVM' ; /usr/bin/curl --no-progress-meter --header 'X-KVMD-User:{{ offsite_pikvm_web_username }}' --header 'X-KVMD-Passwd:{{ offsite_pikvm_web_password }}' --request POST 'https://offsite-pikvm.{{ tailscale_tailnet }}/api/atx/power?action=on'"
    #       - "/usr/bin/echo 'Sleeping for 5m...' ; /usr/bin/sleep 5m"
    #     # syncoid_post_sync_commands:
    #     #   - "/usr/bin/ssh -o StrictHostKeyChecking=accept-new -i /home/{{ ansible_user }}/.ssh/id_ed25519 {{ offsite_nas_syncoid_username }}@offsite-nas.{{ tailscale_tailnet }} 'sudo shutdown now' ; echo 'Shutdown complete'"`
    #     syncoid_timer_on_calendar: "*-*-* 03:00:00"
    #     syncoid_datasets:
    #       - syncoid_source_dataset: tank
    #         syncoid_destination_dataset: backups/tank
    #         syncoid_destination_dataset_mountpoint: /mnt/backups/tank
    #         syncoid_healthchecks_uuid: bc333132-22d4-49de-a975-15ff8683b037
    #       - syncoid_source_dataset: sink
    #         syncoid_destination_dataset: backups/sink
    #         syncoid_destination_dataset_mountpoint: /mnt/backups/sink
    #         syncoid_healthchecks_uuid: e79fc71c-6322-484a-93ef-74f63c6e6ef9
    # - name: Configure samba
    #   ansible.builtin.copy:
    #     src: "files/nas-01/smb.conf"
    #     dest: "/etc/samba/smb.conf"
    #     owner: root
    #     group: root
    #     mode: '0644'
    #   register: copy_smb_conf_result
    # - name: Restart smbd # noqa no-handler
    #   when: copy_smb_conf_result.changed
    #   ansible.builtin.systemd:
    #     name: smbd
    #     state: restarted
    # - name: Configure nfs
    #   vars:
    #     nfs_exports:
    #       # - "/mnt/basin *(rw,sync,insecure,no_subtree_check,all_squash,anonuid={{ smb_nas_01_uid }},anongid={{ vault_smb_nas_01_gid }})"
    #       # - "/mnt/sink/photos *(rw,sync,insecure,no_subtree_check,all_squash,anonuid={{ smb_nas_01_uid }},anongid={{ vault_smb_nas_01_gid }})"
    #       - "/mnt/storage *(rw,sync,insecure,fsid=999,no_subtree_check,all_squash,anonuid={{ smb_nas_01_uid }},anongid={{ vault_smb_nas_01_gid }})"
    #   ansible.builtin.include_role:
    #     name: geerlingguy.nfs
